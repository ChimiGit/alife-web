---
import '../../styles/global.css';

export interface Props {
  // No props needed
}
---

<!-- Blog Loading Page -->
<div class="loader-container min-h-screen flex items-center justify-center relative overflow-hidden bg-cover bg-center bg-no-repeat" style="background-image: url('/assets/loader/blog-loading.png');">
  <!-- Preload background image -->
  <img src="/assets/loader/blog-loading.png" alt="" class="hidden" loading="eager" fetchpriority="high">
  <!-- Animated Background Pattern -->
  <div class="absolute inset-0 opacity-30">
    <div class="dots-pattern animate-pulse"></div>
  </div>

  <!-- Content -->
  <div class="relative z-10 text-center px-4 sm:px-6">
    <h1 class="loader-title text-primary mb-4 sm:mb-6 md:mb-8 animate-fade-in opacity-0 transition-opacity duration-1000 ease-out" style="font-family: 'GT Alpina Fine', serif;">
      Blog
    </h1>
  </div>
</div>

<style>
  .loader-title {
    font-size: 60px; /* Mobile default */
  }

  @media (min-width: 640px) {
    .loader-title {
      font-size: 80px; /* Small screens */
    }
  }

  @media (min-width: 768px) {
    .loader-title {
      font-size: 120px; /* Medium screens */
    }
  }

  @media (min-width: 1024px) {
    .loader-title {
      font-size: 200px; /* Desktop - keep as requested */
    }
  }

  .dots-pattern {
    background-image: radial-gradient(circle, rgba(26, 54, 93, 0.2) 2px, transparent 2px);
    background-size: 20px 20px;
    width: 100%;
    height: 100%;
    animation: slide 20s linear infinite;
  }

  @media (min-width: 640px) {
    .dots-pattern {
      background-size: 30px 30px;
    }
  }

  @media (min-width: 1024px) {
    .dots-pattern {
      background-size: 40px 40px;
    }
  }

  @keyframes slide {
    0% { transform: translate(0, 0); }
    100% { transform: translate(20px, 20px); }
  }

  @media (min-width: 640px) {
    @keyframes slide {
      0% { transform: translate(0, 0); }
      100% { transform: translate(30px, 30px); }
    }
  }

  @media (min-width: 1024px) {
    @keyframes slide {
      0% { transform: translate(0, 0); }
      100% { transform: translate(40px, 40px); }
    }
  }

  .animate-fade-in {
    animation: fadeInScale 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes fadeInScale {
    0% { 
      opacity: 0; 
      transform: translateY(30px) scale(0.95); 
      filter: blur(10px);
    }
    50% {
      opacity: 0.7;
      transform: translateY(10px) scale(0.98);
      filter: blur(5px);
    }
    100% { 
      opacity: 1; 
      transform: translateY(0) scale(1); 
      filter: blur(0);
    }
  }

  /* Enhanced loader container transition */
  .loader-container {
    animation: loaderEntrance 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes loaderEntrance {
    0% { 
      opacity: 0; 
      transform: scale(0.9); 
    }
    100% { 
      opacity: 1; 
      transform: scale(1); 
    }
  }
</style>

<script>
  // Trigger fade-in animation after component mounts
  document.addEventListener('DOMContentLoaded', () => {
    const elements = document.querySelectorAll('.animate-fade-in');
    elements.forEach((el) => {
      el.classList.remove('opacity-0');
    });
  });
</script>
