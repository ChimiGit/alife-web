---
// Horizontal Image Slider Page
import Header from '../components/Header.astro';

export interface Props {
  // No props needed
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Horizontal Slider - ALIFE</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
      body {
        margin: 0;
        font-family: 'Inter', sans-serif;
        background-color: #FFD700; /* Yellow background */
        color: #333;
        overflow: hidden; /* Hide scrollbars for full-page slides */
        padding-top: 5rem; /* Add padding for fixed header */
      }
      
      
      .image-grid {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: calc(100vh - 5rem);
        padding: 20px;
        overflow: auto;
      }
      
      .grid-container {
        display: flex;
        flex-direction: row;
        gap: 1px;
        max-width: 95vw;
        max-height: 90vh;
        overflow-x: hidden;
        overflow-y: hidden;
        padding: 10px;
        animation: scrollRight 10s linear infinite;
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        width: fit-content;
      }
      
      @keyframes scrollRight {
        0% {
          transform: translateX(-50%) translateX(-50%);
        }
        100% {
          transform: translateX(-50%) translateX(50%);
        }
      }
      
      .grid-container:hover {
        animation-play-state: paused;
      }
      
      
      .grid-item {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: transform 0.3s ease;
        min-width: 200px;
        height: 80vh;
        flex-shrink: 0;
        scroll-snap-align: center;
      }
      
      .grid-item:nth-child(n+3) {
        min-width: 100px;
      }
      
      .grid-item:nth-child(n+4) {
        min-width: 75px;
      }

      .grid-item:nth-child(n+5) {
        min-width: 60px;
      }

      .grid-item:nth-child(n+6) {
        min-width: 45px;
      }

      .grid-item:nth-child(n+7) {
        min-width: 30px;
      }

      .grid-item:nth-child(n+8) {
        min-width: 15px;
      }

      .grid-item:nth-child(n+9) {
        min-width: 0px;
      }
      
      .grid-item:hover {
        transform: scale(1.05);
      }
      
      .grid-item img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        width: auto;
        height: 100%;
      }
      
      
      
      .zoom-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
      }
      
      .zoom-overlay.active {
        opacity: 1;
        visibility: visible;
      }
      
      .zoom-image {
        max-width: 90vw;
        max-height: 90vh;
        object-fit: contain;
        border-radius: 8px;
      }
      
      .close-zoom {
        position: absolute;
        top: 20px;
        right: 20px;
        background-color: rgba(255, 255, 255, 0.2);
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
      }
      
      .close-zoom:hover {
        background-color: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
      }
      
      /* Responsive horizontal layout */
      @media (max-width: 768px) {
        .grid-container {
          gap: 1px;
          padding: 5px;
        }
        
        .grid-item {
          min-width: 150px;
          height: 70vh;
        }
        
        .grid-item:nth-child(n+3) {
          min-width: 75px;
        }
        
      }
      
      @media (max-width: 480px) {
        .grid-container {
          gap: 0px;
          padding: 5px;
        }
        
        .grid-item {
          min-width: 120px;
          height: 60vh;
        }
        
        .grid-item:nth-child(n+3) {
          min-width: 60px;
        }
      }
      
      /* Hide scrollbar but keep functionality */
      .grid-container::-webkit-scrollbar {
        height: 8px;
      }
      
      .grid-container::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
      }
      
      .grid-container::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 4px;
      }
      
      .grid-container::-webkit-scrollbar-thumb:hover {
        background: rgba(0, 0, 0, 0.5);
      }
    </style>
  </head>

  <body class="min-h-screen bg-yellow-400 overflow-hidden" style="font-family: 'Inter', sans-serif;">
    <Header />
    
    
    <div class="image-grid">
      <div class="grid-container">
        <!-- First set of all 9 images -->
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 1.png" alt="Column 1" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 2.png" alt="Column 2" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 3.png" alt="Column 3" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 4.png" alt="Column 4" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 5.png" alt="Column 5" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 6.png" alt="Column 6" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 7.png" alt="Column 7" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 8.png" alt="Column 8" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Coulumn 9.png" alt="Column 9" loading="lazy" />
        </div>
        <!-- Duplicate set for seamless loop -->
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 1.png" alt="Column 1" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 2.png" alt="Column 2" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 3.png" alt="Column 3" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 4.png" alt="Column 4" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 5.png" alt="Column 5" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 6.png" alt="Column 6" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 7.png" alt="Column 7" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Column 8.png" alt="Column 8" loading="lazy" />
        </div>
        <div class="grid-item">
          <img src="/assets/home-slider/slider-1/Coulumn 9.png" alt="Column 9" loading="lazy" />
        </div>
      </div>
    </div>
    
    
    <div class="zoom-overlay" id="zoomOverlay">
      <button class="close-zoom" id="closeZoom">&times;</button>
      <img class="zoom-image" id="zoomImage" alt="Zoomed image" />
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const gridItems = document.querySelectorAll('.grid-item');
        const zoomOverlay = document.getElementById('zoomOverlay') as HTMLElement;
        const zoomImage = document.getElementById('zoomImage') as HTMLImageElement;
        const closeZoom = document.getElementById('closeZoom') as HTMLElement;
        
        if (!gridItems.length || !zoomOverlay || !zoomImage || !closeZoom) return;
        
        // Add click event to each grid item
        gridItems.forEach((item) => {
          item.addEventListener('click', () => {
            const img = item.querySelector('img') as HTMLImageElement;
            if (img) {
              zoomImage.src = img.src;
              zoomImage.alt = img.alt;
              zoomOverlay.classList.add('active');
              document.body.style.overflow = 'hidden';
            }
          });
        });
        
        // Close zoom overlay
        function closeZoomOverlay() {
          zoomOverlay.classList.remove('active');
          document.body.style.overflow = 'auto';
        }
        
        closeZoom.addEventListener('click', closeZoomOverlay);
        
        // Close on overlay click (but not on image click)
        zoomOverlay.addEventListener('click', (e) => {
          if (e.target === zoomOverlay) {
            closeZoomOverlay();
          }
        });
        
        // Close on Escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape' && zoomOverlay.classList.contains('active')) {
            closeZoomOverlay();
          }
        });
        
        // Add staggered loading animation
        gridItems.forEach((item, index) => {
          const itemElement = item as HTMLElement;
          itemElement.style.opacity = '0';
          itemElement.style.transform = 'scale(0.8)';
          
          setTimeout(() => {
            itemElement.style.opacity = '1';
            itemElement.style.transform = 'scale(1)';
          }, index * 100);
        });
        
        // Add keyboard navigation for grid items
        
        document.addEventListener('keydown', (e) => {
          if (zoomOverlay && zoomOverlay.classList.contains('active')) return;
          
          switch (e.key) {
            case 'Enter':
            case ' ':
              e.preventDefault();
              (gridItems[currentIndex] as HTMLElement)?.click();
              break;
            default:
              break;
          }
        });
        
        // Animation variables
        let currentIndex = 0;
        
        // Add focus management for accessibility
        gridItems.forEach((item, index) => {
          item.setAttribute('tabindex', '0');
          item.setAttribute('role', 'button');
          item.setAttribute('aria-label', `View image ${index + 1} in full size`);
          
          item.addEventListener('focus', () => {
            currentIndex = index;
          });
        });
      });
    </script>
  </body>
</html>
