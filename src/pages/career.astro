---
import Header from '../components/Header.astro';
import CareerLoading from '../components/loaders/CareerLoading.astro';
import Jobs from '../components/sections/career/Jobs.astro';
import Team from '../components/sections/career/Team.astro';
import TranslationProvider from '../components/TranslationProvider.astro';
import { loadMarkdownTranslations } from '../utils/markdown-translations.ts';

import '../styles/global.css';

// Get language from URL parameters or default to English
const urlParams = new URLSearchParams(Astro.url.search);
const lang = urlParams.get('lang') || 'en';
const translations = await loadMarkdownTranslations(lang);
// const translations = {
//   en: {
//     navigation: {
//       about: 'About', career: 'Career', blog: 'Blog', support: 'Support Us'
//     }
//   },
//   jp: {
//     navigation: {
//       about: '概要', career: 'キャリア', blog: 'ブログ', support: 'サポート'
//     }
//   }
// };
// const t = translations[lang as keyof typeof translations] || translations.en;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/assets/logo/thumbnail-logo.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Career - ALIFE</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="min-h-screen bg-gray-50">
    <!-- Loading Screen -->
    <div id="loading-screen" class="fixed inset-0 z-50 transition-all duration-700 ease-in-out">
      <CareerLoading lang={lang} />
    </div>

    <!-- Main Content (Hidden Initially) -->
    <div id="main-content" class="opacity-0 transition-opacity duration-500 ease-in hidden">
      <Header lang={lang} />
      <TranslationProvider lang={lang} />

      <!-- Main content -->
      <main class="max-w-6xl mx-auto px-4 sm:px-6 pt-20 sm:pt-24 pb-8 sm:pb-12">

      <!-- Hero Section -->
      <section class="text-center mb-8 sm:mb-10">
        <h1 class="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl text-primary mb-6 sm:mb-8 leading-tight" style="font-family: 'GT Alpina Fine', serif;">
          Where Brilliant<br>
          Minds Explore Together
        </h1>
      </section>
      <p class="text-sm sm:text-base text-primary max-w-4xl mx-auto leading-relaxed mb-12 sm:mb-20 px-4 sm:px-0 font-light" style="font-family: 'Inter', sans-serif; line-height: 2;">
        Discover what happens at the intersection of nature and computation, where we're creating something
        unprecedented. Our team combines world-class researchers and innovative engineers united by a shared
        fascination with emergence and open-ended discovery. Here, your expertise contributes to projects that
        grow organically, surprising even their creators.
      </p>

      <!-- Join Us Section with Tabs -->
      <section class="text-center mb-12 sm:mb-20">
        <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold text-primary mb-6 sm:mb-8" style="font-family: 'GT Alpina Fine', serif;">
          {translations['Join Us!'] || 'Join Us!'}
        </h2>
        <div class="flex flex-row justify-center gap-4 mb-12 font-light text-sm">
          <button id="our-team-tab" class="main-tab active bg-primary text-white px-6 py-2 rounded-full transition-colors duration-200" data-target="#our-team-content">
            {translations['Our Team'] || 'Our Team'}
          </button>
          <button id="jobs-tab" class="main-tab border border-primary text-primary px-6 py-2 rounded-full transition-colors duration-200" data-target="#jobs-content">
            {translations.Jobs || 'Jobs'}
          </button>
        </div>

        <!-- Tab Content -->
        <div class="max-w-6xl mx-auto">
          <!-- Our Team Content -->
          <div id="our-team-content" class="main-tab-content">
            <Team />
          </div>

          <!-- Jobs Content -->
          <div id="jobs-content" class="main-tab-content hidden">
            <div class="text-left">
              <Jobs lang={lang} />
            </div>
          </div>
        </div>
      </section>
      </main>
    </div>

    <!-- Tab functionality script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Main tabs (Our Team / Jobs)
        const mainTabs = document.querySelectorAll('.main-tab');
        const mainTabContents = document.querySelectorAll('.main-tab-content');

        mainTabs.forEach((tab) => {
          tab.addEventListener('click', () => {
            const targetId = tab.getAttribute('data-target');
            const targetContent = targetId ? document.querySelector(targetId) : null;

            // Remove active state from all main tabs
            mainTabs.forEach((t) => {
              t.classList.remove('active', 'bg-primary', 'text-white');
              t.classList.add('border', 'border-primary', 'text-primary');
            });

            // Hide all main tab contents
            mainTabContents.forEach((content) => {
              content.classList.add('hidden');
            });

            // Add active state to clicked main tab
            tab.classList.add('active', 'bg-primary', 'text-white');
            tab.classList.remove('border', 'border-primary', 'text-primary');

            // Show target content
            if (targetContent) {
              targetContent.classList.remove('hidden');
            }
          });
        });

        // Note: Team tab functionality is now handled in Team.astro component

        // Loading screen slide-up animation
        setTimeout(() => {
          const loadingScreen = document.getElementById('loading-screen');
          const mainContent = document.getElementById('main-content');

          if (loadingScreen && mainContent) {
            // Slide loading screen upward using CSS class
            loadingScreen.classList.add('loading-slide-up');

            setTimeout(() => {
              if (loadingScreen && mainContent) {
                // Hide loading screen and show main content
                loadingScreen.classList.add('hidden');
                mainContent.classList.remove('hidden');

                // Fade in main content
                setTimeout(() => {
                  if (mainContent) {
                    mainContent.classList.remove('opacity-0');
                    mainContent.classList.add('opacity-100');
                  }
                }, 50);
              }
            }, 700);
          }
        }, 2500); // Show loading for 2.5 seconds
      });
    </script>

  </body>
</html>
