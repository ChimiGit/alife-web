---
import Layout from '../layouts/Layout.astro';
import getAllBlogs, { getBlogsByCategory } from '../utils/blog.ts';
import { getBlogCategories } from '../utils/blog-categories.ts';

// Get actual blog posts and categories
const allBlogs = getAllBlogs();
const blogCategories = await getBlogCategories();

// Create content data based on actual blog posts and categories
const contentData = Object.fromEntries(
  blogCategories.map(category => [
    category.data.title.toLowerCase().replace(/\s+/g, '-'),
    {
      posts: category.data.title === 'Overview' 
        ? allBlogs.map((blog, index) => ({
            id: index + 1,
            title: blog.title,
            excerpt: blog.description,
            category: blog.category,
            slug: blog.slug,
            pubDate: blog.pubDate,
            author: blog.author,
            tags: blog.tags || []
          }))
        : getBlogsByCategory(category.data.title).map((blog, index) => ({
            id: index + 1,
            title: blog.title,
            excerpt: blog.description,
            category: blog.category,
            slug: blog.slug,
            pubDate: blog.pubDate,
            author: blog.author,
            tags: blog.tags || []
          })),
      categoryInfo: category.data
    }
  ])
);
---

<Layout title="Blog - ALIFE" description="Research breakthroughs, upcoming events, and latest news from the frontier of evolutionary AI">
  <main id="blog-content" class="max-w-6xl mx-auto px-4 sm:px-6 pb-12 content-stagger" style="font-family: 'Inter', sans-serif;">
    <div class="mb-12 pt-10 sm:pt-10 md:pt-10">
      <h2 class="text-5xl sm:text-5xl md:text-5xl lg:text-6xl xl:text-64px text-primary mb-4 sm:mb-6 md:mb-8" style="font-family: 'GT Alpina Fine', serif;">Sharing Our Journey</h2>
      <p class="text-sm sm:text-base md:text-lg lg:text-xl text-primary max-w-3xl font-light">
        Research breakthroughs, upcoming events, and latest news from the frontier of evolutionary AI
      </p>
    </div>

    <div class="mb-8 tabs-section">
      <div class="overflow-x-auto">
        <div class="flex min-w-max">
          <div class="flex bg-gray-100 rounded-full p-1 font-light text-sm">
            {blogCategories.map((category, index) => (
              <button 
                id={`${category.data.title.toLowerCase().replace(/\s+/g, '-')}-tab`} 
                class={`px-6 py-2 rounded-full transition-all duration-200 whitespace-nowrap cursor-pointer ${
                  index === 0 
                    ? 'active-tab bg-primary text-white' 
                    : 'tab text-primary hover:bg-gray-200'
                }`}
              >
                {category.data.title}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>

    <!-- Separator line -->
    <div class="border-b border-gray-200 mb-8"></div>

    <div class="w-full content-section">
      <div id="tab-content" class="w-full">
        <!-- Dynamic category content -->
        {blogCategories.map((category, index) => {
          const categoryKey = category.data.title.toLowerCase().replace(/\s+/g, '-');
          const categoryData = contentData[categoryKey];
          return (
            <div 
              id={`${categoryKey}-content`} 
              class={`tab-content ${index === 0 ? '' : 'hidden'}`}
            >
              <div class="grid grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {categoryData?.posts.map((post: any) => (
                  <a href={`${import.meta.env.BASE_URL}blog/${post.slug}`} class="block group blog-card cursor-pointer">
                    <div class="mb-6">
                      <img 
                        src={`${import.meta.env.BASE_URL}assets/images/image.png`}
                        loading="lazy"
                        alt={post.title}
                        class="w-full aspect-square object-cover "
                      />
                    </div>
                    <div class="space-y-3">
                      <h2 class="text-lg sm:text-xl md:text-2xl lg:text-3xl font-medium leading-snug group-hover:text-primary transition-colors duration-200" style="font-family: 'GT Alpina Fine', serif;">
                        {post.title}
                      </h2>
                      <p class="text-xs sm:text-sm md:text-base lg:text-lg leading-relaxed line-clamp-3 font-light">
                        {post.excerpt}
                      </p>
                    </div>
                  </a>
                ))}
                
                {(!categoryData?.posts || categoryData.posts.length === 0) && (
                  <div class="col-span-full text-center py-12">
                    <p class="text-gray-500 text-lg">No blog posts available yet.</p>
                    <p class="text-gray-400 text-sm mt-2">Check back soon for updates!</p>
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </main>

  <style>
    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
    
    /* Hide scrollbar for tab navigation */
    .overflow-x-auto {
      scrollbar-width: none; /* Firefox */
      -ms-overflow-style: none; /* Internet Explorer 10+ */
    }
    
    .overflow-x-auto::-webkit-scrollbar {
      display: none; /* WebKit */
    }
    
    /* Smooth scrolling for tabs */
    .overflow-x-auto {
      scroll-behavior: smooth;
    }
    
    /* Ensure tabs don't shrink on mobile */
    @media (max-width: 768px) {
      .flex.justify-center.min-w-max {
        justify-content: flex-start;
        padding: 0 1rem;
      }
    }

    /* Slide-in animation styles for back navigation from blog pages */
    .slide-in-from-left {
      transform: translateX(-100%);
      opacity: 0;
      transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.6s ease-out;
    }

    .slide-in-from-left.animate {
      transform: translateX(0);
      opacity: 1;
    }

    /* Staggered animation for child elements */
    .slide-in-from-left .hero-section,
    .slide-in-from-left .tabs-section,
    .slide-in-from-left .content-section {
      transform: translateX(-50px);
      opacity: 0;
      transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.5s ease-out;
    }

    .slide-in-from-left.animate .hero-section {
      transition-delay: 0.1s;
    }

    .slide-in-from-left.animate .tabs-section {
      transition-delay: 0.2s;
    }

    .slide-in-from-left.animate .content-section {
      transition-delay: 0.3s;
    }

    .slide-in-from-left.animate .hero-section,
    .slide-in-from-left.animate .tabs-section,
    .slide-in-from-left.animate .content-section {
      transform: translateX(0);
      opacity: 1;
    }

    /* Card animation styles for tab switching */
    .blog-card {
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.4s ease-out, transform 0.4s ease-out;
    }

    .blog-card.animate {
      opacity: 1;
      transform: translateY(0);
    }

    /* Staggered animation for cards */
    .blog-card:nth-child(1) { transition-delay: 0.1s; }
    .blog-card:nth-child(2) { transition-delay: 0.2s; }
    .blog-card:nth-child(3) { transition-delay: 0.3s; }
    .blog-card:nth-child(4) { transition-delay: 0.4s; }
    .blog-card:nth-child(5) { transition-delay: 0.5s; }
    .blog-card:nth-child(6) { transition-delay: 0.6s; }
    .blog-card:nth-child(7) { transition-delay: 0.7s; }
    .blog-card:nth-child(8) { transition-delay: 0.8s; }
  </style>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      // Tab functionality
      const tabs = document.querySelectorAll('.tab, .active-tab');
      const tabContents = document.querySelectorAll('.tab-content');

      function showTab(tabName) {
        // Hide all tab contents
        tabContents.forEach((content) => {
          content.classList.add('hidden');
          // Remove animation classes from cards in hidden tabs
          const cards = content.querySelectorAll('.blog-card');
          cards.forEach(card => {
            card.classList.remove('animate');
          });
        });

        // Show selected tab content
        const selectedContent = document.getElementById(`${tabName}-content`);
        if (selectedContent) {
          selectedContent.classList.remove('hidden');
          
          // Animate cards in the selected tab
          const cards = selectedContent.querySelectorAll('.blog-card');
          cards.forEach((card, index) => {
            // Reset animation delay for each card
            card.style.transitionDelay = `${(index + 1) * 0.1}s`;
            // Trigger animation
            setTimeout(() => {
              card.classList.add('animate');
            }, 50);
          });
        }
      }

      tabs.forEach((tab) => {
        tab.addEventListener('click', function () {
          // Update tab styling
          tabs.forEach((t) => {
            t.classList.remove('active-tab', 'bg-primary', 'text-white');
            t.classList.add('tab', 'text-primary');
          });

          this.classList.remove('tab', 'text-primary');
          this.classList.add('active-tab', 'bg-primary', 'text-white');

          // Get tab name from ID
          const tabName = this.id.replace('-tab', '');
          showTab(tabName);
        });
      });

      // Initialize with first tab (Overview)
      const firstTab = tabs[0];
      if (firstTab) {
        const tabName = firstTab.id.replace('-tab', '');
        showTab(tabName);
      }
      
      // Animate initial cards after page load
      setTimeout(() => {
        const firstTabContent = document.querySelector('.tab-content:not(.hidden)');
        if (firstTabContent) {
          const cards = firstTabContent.querySelectorAll('.blog-card');
          cards.forEach((card, index) => {
            card.style.transitionDelay = `${(index + 1) * 0.1}s`;
            setTimeout(() => {
              card.classList.add('animate');
            }, 50);
          });
        }
      }, 100);
    });
  </script>

  <!-- Initialize content animations -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        const staggerContainer = document.querySelector('.content-stagger');
        if (staggerContainer) {
          staggerContainer.classList.add('loaded');
        }
      }, 100);
    });
  </script>
</Layout>